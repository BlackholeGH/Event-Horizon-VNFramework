using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Media;


namespace VNFramework
{
    partial class Animation
    {
        public String PrintFrames()
        {
            String Out = "";
            if(lastMovementFrames.Count != 0)
            {
                Out += "&MOVEMENTINITIAL=";
                foreach(int Time in lastMovementFrames.Keys)
                {
                    Out += Time + "," + ((Vector2)lastMovementFrames[Time]).X +"," + ((Vector2)lastMovementFrames[Time]).Y + "|";
                }
                Out = Out.Remove(Out.Length - 1);
                Out += "&MOVEMENTCURRENT=";
                foreach (int Time in lastMovementFrames.Keys)
                {
                    Out += Time + "," + ((Vector2)lastMovementFrames[Time]).X + "," + ((Vector2)lastMovementFrames[Time]).Y + "|";
                }
                Out = Out.Remove(Out.Length - 1);
            }
        }
    }
    static class SaveLoadModule
    {
        static String ProcessWorldEntity(WorldEntity E, Boolean Update, Boolean Render)
        {
            String Record = "";
            Record += "{";
            if (E is Button) { Record += "BUTTON"; }
            else if (E is TextEntity) { Record += "TEXTENTITY"; }
            else if (E is ScriptProcessor.ScriptSniffer) { Record += "SCRIPTSNIFFER"; }
            else { Record += "WORLDENTITY"; }
            Record += "&NAME=" + E.Name;
            if (Update) { Record += "&UPDATEINCLUDE"; } 
            if (Render) { Record += "&RENDERINCLUDE"; }
            if (E.Drawable) { Record += "&DRAWABLE"; }
            if (E.CenterOrigin) { Record += "&CENTERORIGIN"; }
            if (E.Clickable) { Record += "&CLICKABLE"; }
            Record += "&ATLAS=" + E.Atlas.ReferenceHash;
            Record += "&X=" + E.DrawCoords.X;
            Record += "&Y=" + E.DrawCoords.X;
            Record += "&SCALEX=" + E.ScaleSize.X;
            Record += "&SCALEY=" + E.ScaleSize.Y;
            Record += "&ROTATION=" + E.RotationRads;
            Record += "&DEPTH=" + E.LayerDepth;
            Record += "&COLOUR=" + E.ColourValue;
            if(E.AnimationQueue.Count > 0)
            {
                Record += "&ANIMS=";
            }
            Record += "}";
            return Record;
        }
        static String ProcessAnimation(Animation A)
        {
            String Record = "[ANIMATION";
            Record += "&NAME=" + A.AnimName;
            if(A.Loop) { Record += "&LOOP"; }
            if(A.Started) { Record += "&STARTED"; }
            if(A.Spent) { Record += "&SPENT"; }

            Record += "]";
            return Record;
        }
        static String GenerateSaveScript()
        {
            ArrayList Ents = new ArrayList();
            foreach (WorldEntity E in Shell.UpdateQueue)
            {
                Ents.Add(new object[] { E, true, false });
            }
            foreach (WorldEntity E in Shell.RenderQueue)
            {
                for(int i = 0; i < Ents.Count; i++)
                {
                    object[] R = (object[])Ents[i];
                    WorldEntity PE = (WorldEntity)R[0];
                    if(PE == E)
                    {
                        R[2] = true;
                    }
                    else
                    {
                        Ents.Add(new object[] { E, false, true });
                    }
                }
                Ents.Add(new object[] { E, true, false });
            }
            String Entities = "#ENTITIES:";
            foreach(object[] R in Ents)
            {
                Entities += ProcessWorldEntity((WorldEntity)R[0], (Boolean)R[1], (Boolean)R[2]);
            }
        }
    }
}
